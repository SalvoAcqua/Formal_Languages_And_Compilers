
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\006\004\000\002\010\007" +
    "\000\002\010\012\000\002\011\003\000\002\011\005\000" +
    "\002\011\006\000\002\012\010\000\002\007\010\000\002" +
    "\007\013\000\002\013\005\000\002\013\002\000\002\004" +
    "\003\000\002\014\005\000\002\014\004\000\002\015\007" +
    "\000\002\024\007\000\002\024\005\000\002\005\003\000" +
    "\002\025\002\000\002\017\013\000\002\017\002\000\002" +
    "\020\010\000\002\020\006\000\002\021\007\000\002\021" +
    "\005\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\006\011\007\012\006\001\002\000\004\004" +
    "\054\001\002\000\006\011\040\012\037\001\002\000\004" +
    "\005\023\001\002\000\004\005\014\001\002\000\004\002" +
    "\013\001\002\000\004\004\ufffe\001\002\000\004\004\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\011\015\001" +
    "\002\000\004\005\016\001\002\000\004\011\017\001\002" +
    "\000\004\005\020\001\002\000\004\011\021\001\002\000" +
    "\004\005\022\001\002\000\006\011\ufffb\012\ufffb\001\002" +
    "\000\006\011\ufff3\012\ufff3\001\002\000\006\011\026\012" +
    "\025\001\002\000\004\005\030\001\002\000\004\005\027" +
    "\001\002\000\010\004\ufff4\011\ufff4\012\ufff4\001\002\000" +
    "\010\004\ufff3\011\ufff3\012\ufff3\001\002\000\010\004\ufff6" +
    "\011\026\012\032\001\002\000\004\005\033\001\002\000" +
    "\006\004\ufff3\011\ufff3\001\002\000\006\004\ufff5\011\026" +
    "\001\002\000\004\004\ufffd\001\002\000\006\004\ufffa\012" +
    "\037\001\002\000\004\005\044\001\002\000\004\005\041" +
    "\001\002\000\004\011\042\001\002\000\004\005\043\001" +
    "\002\000\006\011\ufffc\012\ufffc\001\002\000\004\012\045" +
    "\001\002\000\004\005\046\001\002\000\004\012\047\001" +
    "\002\000\004\005\050\001\002\000\006\004\ufff7\012\ufff7" +
    "\001\002\000\004\012\037\001\002\000\006\004\ufff9\012" +
    "\037\001\002\000\004\004\ufff8\001\002\000\004\007\056" +
    "\001\002\000\006\004\ufff2\007\056\001\002\000\004\017" +
    "\116\001\002\000\004\007\056\001\002\000\004\004\061" +
    "\001\002\000\006\002\uffe9\021\uffe9\001\002\000\004\002" +
    "\000\001\002\000\006\002\uffec\021\064\001\002\000\004" +
    "\014\065\001\002\000\004\017\uffe4\001\002\000\004\017" +
    "\067\001\002\000\004\015\uffeb\001\002\000\004\015\071" +
    "\001\002\000\004\017\073\001\002\000\006\005\107\006" +
    "\106\001\002\000\004\007\074\001\002\000\004\017\076" +
    "\001\002\000\006\006\101\010\102\001\002\000\004\020" +
    "\077\001\002\000\004\016\100\001\002\000\006\006\uffe5" +
    "\010\uffe5\001\002\000\004\017\103\001\002\000\006\005" +
    "\uffe7\006\uffe7\001\002\000\004\020\104\001\002\000\004" +
    "\016\105\001\002\000\006\006\uffe6\010\uffe6\001\002\000" +
    "\004\017\110\001\002\000\006\002\uffea\021\uffea\001\002" +
    "\000\004\007\111\001\002\000\004\017\076\001\002\000" +
    "\006\006\101\010\113\001\002\000\006\005\uffe8\006\uffe8" +
    "\001\002\000\006\004\ufff0\007\ufff0\001\002\000\006\006" +
    "\121\010\122\001\002\000\004\021\117\001\002\000\004" +
    "\013\120\001\002\000\006\006\uffed\010\uffed\001\002\000" +
    "\004\017\125\001\002\000\004\017\123\001\002\000\004" +
    "\005\124\001\002\000\006\004\uffef\007\uffef\001\002\000" +
    "\004\021\126\001\002\000\004\013\127\001\002\000\006" +
    "\006\uffee\010\uffee\001\002\000\004\007\056\001\002\000" +
    "\006\004\ufff1\007\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\014\002\007\003\003\006\011\007\010\010" +
    "\004\001\001\000\002\001\001\000\006\011\034\012\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\051\001\001" +
    "\000\004\012\052\001\001\000\002\001\001\000\010\004" +
    "\057\014\054\015\056\001\001\000\004\015\127\001\001" +
    "\000\004\024\114\001\001\000\004\015\113\001\001\000" +
    "\002\001\001\000\006\005\061\017\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\065\001\001\000\002\001\001\000\004\025\067\001\001" +
    "\000\002\001\001\000\004\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\130\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Double>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public HashMap<String, HashMap<String, Double>> table;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    class MyObj {
        private String minMaterial;
        private String maxMaterial;
        private Double minValue;
        private Double maxValue;
        private HashMap tab;

        MyObj(String minMaterial, String maxMaterial, Double minValue, Double maxValue, HashMap tab){
            this.minMaterial = minMaterial;
            this.maxMaterial = maxMaterial;
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.tab = tab;
        }

        String getMinMaterial() { return this.minMaterial; }
        String getMaxMaterial(){ return this.maxMaterial; }
        Double getMinValue() { return this.minValue; }
        Double getMaxValue(){ return this.maxValue; }
        HashMap getTab() { return this.tab; }

        void setMinMaterial(String minMaterial) {this.minMaterial = minMaterial; }
        void setMaxMaterial(String maxMaterial) {this.maxMaterial = maxMaterial; }
        void setMinValue(Double minValue) {this.minValue = minValue; }
        void setMaxValue(Double maxValue) {this.maxValue = maxValue; }

    };

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= headerSec SEP warehouseSec SEP productsSec 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;
		 System.out.println("prog recognized"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // headerSec ::= header1 
            { parser.Tree.reduce(1,"headerSec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headerSec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // headerSec ::= header2 
            { parser.Tree.reduce(1,"headerSec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headerSec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header1 ::= lTK1 lTK2 
            { parser.Tree.reduce(2,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lTK1 ::= lTK1 TK1 S TK1 S 
            { parser.Tree.reduce(5,"lTK1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lTK1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lTK1 ::= TK1 S TK1 S TK1 S TK1 S 
            { parser.Tree.reduce(8,"lTK1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lTK1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lTK2 ::= TK2x3 
            { parser.Tree.reduce(1,"lTK2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lTK2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lTK2 ::= TK2x3 TK2x3 TK2x3 
            { parser.Tree.reduce(3,"lTK2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lTK2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lTK2 ::= TK2x3 TK2x3 TK2x3 TK2x3 
            { parser.Tree.reduce(4,"lTK2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lTK2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TK2x3 ::= TK2 S TK2 S TK2 S 
            { parser.Tree.reduce(6,"TK2x3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK2x3",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header2 ::= TK2 S TK1list TK2 S TK1list 
            { parser.Tree.reduce(6,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // header2 ::= TK2 S TK1list TK2 S TK1list TK2 S TK1list 
            { parser.Tree.reduce(9,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TK1list ::= TK1list TK1 S 
            { parser.Tree.reduce(3,"TK1list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK1list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TK1list ::= 
            { parser.Tree.reduce(0,"TK1list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK1list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // warehouseSec ::= matTypeList 
            { parser.Tree.reduce(1,"warehouseSec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("warehouseSec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // matTypeList ::= matTypeList matType matType 
            { parser.Tree.reduce(3,"matTypeList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matTypeList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // matTypeList ::= matType matType 
            { parser.Tree.reduce(2,"matTypeList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matTypeList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // matType ::= BO matList BC NAME S 
            { parser.Tree.reduce(5,"matType",0);
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MyObj o = (MyObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.table.put(x,o.getTab());
                                        System.out.println(x + ": less: " + o.getMinMaterial() + ", more: " + o.getMaxMaterial());
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // matList ::= matList CM NAME REAL EUROKG 
            { parser.Tree.reduce(5,"matList",0);
              MyObj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		MyObj o = (MyObj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 o.getTab().put(x,y);
                                                if (y<o.getMinValue()) {
                                                    o.setMinValue(y);
                                                    o.setMinMaterial(x);
                                                }
                                                if (y>o.getMaxValue()) {
                                                    o.setMaxValue(y);
                                                    o.setMaxMaterial(x);
                                                }
                                                RESULT = o;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("matList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // matList ::= NAME REAL EUROKG 
            { parser.Tree.reduce(3,"matList",0);
              MyObj RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 HashMap<String, Double> tab = new HashMap<String, Double>(); 
            tab.put(x,y);
            RESULT = new MyObj(x, x, y, y, tab);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // productsSec ::= productsList 
            { parser.Tree.reduce(1,"productsSec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("productsSec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            { parser.Tree.reduce(0,"NT$0",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(x);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // productsList ::= productsList REAL EURO NT1 NAME NT$0 COL elementList S 
            { parser.Tree.reduce(9,"productsList",0);
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("productsList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // productsList ::= 
            { parser.Tree.reduce(0,"productsList",0);
              Object RESULT =null;
		 System.out.println("----------");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("productsList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elementList ::= elementList CM NAME BO componentList BC 
            { parser.Tree.reduce(6,"elementList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elementList ::= NAME BO componentList BC 
            { parser.Tree.reduce(4,"elementList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // componentList ::= componentList CM NAME UINT KG 
            { parser.Tree.reduce(5,"componentList",0);
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                        Double res = (x*parser.table.get(parser.stack(-6)).get(y))+(Double)parser.stack(-12);
                                                        System.out.println(y + " " + res + " euro");
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("componentList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // componentList ::= NAME UINT KG 
            { parser.Tree.reduce(3,"componentList",0);
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   
                            Double res = (x*parser.table.get(parser.stack(-4)).get(y))+(Double)parser.stack(-10);
                            System.out.println(y + " " + res + " euro");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("componentList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Double RESULT =null;
		RESULT = (Double) parser.stack(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
