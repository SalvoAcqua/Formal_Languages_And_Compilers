
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\011\000\002\003\014\000\002\004\005" +
    "\000\002\004\002\000\002\005\004\000\002\012\005\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\006\000\002\012\007\000\002\012\007\000\002\006" +
    "\005\000\002\007\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\010\006\000\002\011\003\000" +
    "\002\011\005\000\002\016\006\000\002\016\005\000\002" +
    "\015\004\000\002\015\004\000\002\014\005\000\002\014" +
    "\005\000\002\017\007\000\002\017\007\000\002\020\007" +
    "\000\002\020\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\010\004\ufffb\005\ufffb\006\ufffb\001\002\000" +
    "\010\004\uffff\005\122\006\121\001\002\000\004\002\120" +
    "\001\002\000\004\004\007\001\002\000\004\010\012\001" +
    "\002\000\006\022\056\023\062\001\002\000\004\002\000" +
    "\001\002\000\010\014\015\030\016\031\014\001\002\000" +
    "\004\014\051\001\002\000\006\016\025\032\024\001\002" +
    "\000\010\007\043\030\016\031\014\001\002\000\006\016" +
    "\025\032\024\001\002\000\004\014\020\001\002\000\006" +
    "\007\022\031\014\001\002\000\004\007\023\001\002\000" +
    "\006\022\ufff6\023\ufff6\001\002\000\006\022\ufff4\023\ufff4" +
    "\001\002\000\024\007\uffee\011\uffee\012\uffee\013\uffee\015" +
    "\uffee\020\uffee\021\uffee\026\uffee\027\uffee\001\002\000\004" +
    "\017\034\001\002\000\010\011\031\013\030\015\027\001" +
    "\002\000\006\016\025\032\024\001\002\000\006\016\025" +
    "\032\024\001\002\000\006\007\ufff2\014\ufff2\001\002\000" +
    "\024\007\ufff0\011\ufff0\012\ufff0\013\ufff0\015\027\020\ufff0" +
    "\021\ufff0\026\ufff0\027\ufff0\001\002\000\024\007\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\020\uffef\021\uffef\026\uffef" +
    "\027\uffef\001\002\000\006\016\025\032\024\001\002\000" +
    "\006\020\040\021\037\001\002\000\012\013\030\015\027" +
    "\020\uffec\021\uffec\001\002\000\006\016\025\032\024\001" +
    "\002\000\024\007\uffed\011\uffed\012\uffed\013\uffed\015\uffed" +
    "\020\uffed\021\uffed\026\uffed\027\uffed\001\002\000\012\013" +
    "\030\015\027\020\uffeb\021\uffeb\001\002\000\004\007\046" +
    "\001\002\000\006\022\ufff9\023\ufff9\001\002\000\004\007" +
    "\045\001\002\000\006\022\ufff8\023\ufff8\001\002\000\006" +
    "\022\ufff7\023\ufff7\001\002\000\010\012\050\013\030\015" +
    "\027\001\002\000\006\007\ufff1\014\ufff1\001\002\000\006" +
    "\007\052\030\016\001\002\000\006\022\ufff5\023\ufff5\001" +
    "\002\000\004\007\054\001\002\000\006\022\ufff3\023\ufff3" +
    "\001\002\000\004\007\117\001\002\000\006\030\114\031" +
    "\113\001\002\000\004\007\112\001\002\000\010\002\ufffa" +
    "\022\056\023\062\001\002\000\006\022\056\023\062\001" +
    "\002\000\006\030\064\031\063\001\002\000\004\024\102" +
    "\001\002\000\004\024\065\001\002\000\006\016\025\032" +
    "\024\001\002\000\010\016\025\025\074\032\024\001\002" +
    "\000\010\013\030\015\027\026\070\001\002\000\006\016" +
    "\025\032\024\001\002\000\010\013\030\015\027\027\072" +
    "\001\002\000\004\007\073\001\002\000\010\016\uffe2\025" +
    "\uffe2\032\uffe2\001\002\000\004\007\uffe4\001\002\000\010" +
    "\013\030\015\027\026\076\001\002\000\006\016\025\032" +
    "\024\001\002\000\010\013\030\015\027\027\100\001\002" +
    "\000\004\007\101\001\002\000\010\016\uffe1\025\uffe1\032" +
    "\uffe1\001\002\000\006\016\025\032\024\001\002\000\010" +
    "\016\025\025\104\032\024\001\002\000\004\007\uffe3\001" +
    "\002\000\006\022\056\023\062\001\002\000\006\022\056" +
    "\023\062\001\002\000\010\002\uffea\022\uffea\023\uffea\001" +
    "\002\000\006\022\056\023\062\001\002\000\010\002\uffe9" +
    "\022\uffe9\023\uffe9\001\002\000\010\002\uffe8\022\uffe8\023" +
    "\uffe8\001\002\000\006\016\025\032\024\001\002\000\006" +
    "\016\025\032\024\001\002\000\010\007\uffe6\013\030\015" +
    "\027\001\002\000\010\007\uffe5\013\030\015\027\001\002" +
    "\000\010\002\uffe7\022\uffe7\023\uffe7\001\002\000\004\002" +
    "\001\001\002\000\004\007\124\001\002\000\004\007\123" +
    "\001\002\000\010\004\ufffc\005\ufffc\006\ufffc\001\002\000" +
    "\006\005\ufffb\006\ufffb\001\002\000\006\005\122\006\126" +
    "\001\002\000\004\007\127\001\002\000\010\004\ufffb\005" +
    "\ufffb\006\ufffb\001\002\000\010\004\ufffe\005\122\006\131" +
    "\001\002\000\004\007\132\001\002\000\006\004\ufffb\005" +
    "\ufffb\001\002\000\006\004\ufffd\005\122\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\010\012\007\001\001\000\012\014\056\015\060\016" +
    "\057\017\054\001\001\000\002\001\001\000\006\006\016" +
    "\007\012\001\001\000\002\001\001\000\004\010\046\001" +
    "\001\000\006\006\043\007\041\001\001\000\004\010\025" +
    "\001\001\000\002\001\001\000\004\007\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\032\001\001\000\004\010\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\035\011" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\056\015\107\017\054" +
    "\001\001\000\010\014\056\015\104\017\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\066\020\065\001\001\000\004\010\074\001\001\000" +
    "\002\001\001\000\004\010\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\066\020" +
    "\102\001\001\000\004\010\074\001\001\000\002\001\001" +
    "\000\010\014\056\015\105\017\054\001\001\000\010\014" +
    "\056\015\106\017\054\001\001\000\002\001\001\000\010" +
    "\014\056\015\110\017\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\115\001\001\000\004\010\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\132\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Integer>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public HashMap<String, HashMap<String, Integer>> table;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP run 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= listTK1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= listTK1 TK2 S listTK1 TK2 S listTK1 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= listTK1 TK2 S listTK1 TK2 S listTK1 TK2 S listTK1 
            { parser.Tree.reduce(10,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listTK1 ::= listTK1 TK1 S 
            { parser.Tree.reduce(3,"listTK1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listTK1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listTK1 ::= 
            { parser.Tree.reduce(0,"listTK1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listTK1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // run ::= startInstr commandList 
            { parser.Tree.reduce(2,"run",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("run",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // startInstr ::= START MINUS S 
            { parser.Tree.reduce(3,"startInstr",0);
              Double[] RESULT =null;
		 RESULT = new Double[2];
                                RESULT[0] = 100.00;
                                RESULT[1] = 100.00;
                                System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("startInstr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // startInstr ::= START MINUS batteryAss S 
            { parser.Tree.reduce(4,"startInstr",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2];
                                RESULT[0] = x;
                                RESULT[1] = 100.00;
                                System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("startInstr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // startInstr ::= START MINUS fuelAss S 
            { parser.Tree.reduce(4,"startInstr",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2];
                                RESULT[0] = 100.00;
                                RESULT[1] = x;
                                System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("startInstr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // startInstr ::= START batteryAss MINUS S 
            { parser.Tree.reduce(4,"startInstr",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Double[2];
                                RESULT[0] = x;
                                RESULT[1] = 100.00;
                                System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("startInstr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // startInstr ::= START fuelAss MINUS S 
            { parser.Tree.reduce(4,"startInstr",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Double[2];
                                RESULT[0] = 100.00;
                                RESULT[1] = x;
                                System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("startInstr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // startInstr ::= START batteryAss MINUS fuelAss S 
            { parser.Tree.reduce(5,"startInstr",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2];
                                RESULT[0] = x;
                                RESULT[1] = y;
                                System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("startInstr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // startInstr ::= START fuelAss MINUS batteryAss S 
            { parser.Tree.reduce(5,"startInstr",0);
              Double[] RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double[2];
                                RESULT[0] = x;
                                RESULT[1] = y;
                                System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("startInstr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // batteryAss ::= BATTERY expr KWH 
            { parser.Tree.reduce(3,"batteryAss",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("batteryAss",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fuelAss ::= FUEL expr LITERS 
            { parser.Tree.reduce(3,"fuelAss",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuelAss",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x+y;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr STAR expr 
            { parser.Tree.reduce(3,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x*y;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= REAL 
            { parser.Tree.reduce(1,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= MAX RO exprList RC 
            { parser.Tree.reduce(4,"expr",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exprList ::= expr 
            { parser.Tree.reduce(1,"exprList",0);
              Double RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exprList ::= exprList CM expr 
            { parser.Tree.reduce(3,"exprList",0);
              Double RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(x>y){
                                RESULT = x;
                            } else {
                                RESULT = y;
                            }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // commandList ::= command command command command 
            { parser.Tree.reduce(4,"commandList",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commandList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // commandList ::= commandList command command 
            { parser.Tree.reduce(3,"commandList",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("commandList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // command ::= mod S 
            { parser.Tree.reduce(2,"command",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // command ::= use S 
            { parser.Tree.reduce(2,"command",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // mod ::= MOD BATTERY expr 
            { parser.Tree.reduce(3,"mod",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Double[] myArr = (Double[]) parser.stack(-3);
                    myArr[0] += x; 
                    RESULT = myArr;
                    System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // mod ::= MOD FUEL expr 
            { parser.Tree.reduce(3,"mod",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Double[] myArr = (Double[]) parser.stack(-3);
                    myArr[1] += x; 
                    RESULT = myArr;
                    System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // use ::= USE BATTERY DO consList DONE 
            { parser.Tree.reduce(5,"use",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // use ::= USE FUEL DO consList DONE 
            { parser.Tree.reduce(5,"use",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] x = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // consList ::= expr KM expr UNITS S 
            { parser.Tree.reduce(5,"consList",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                        Double[] myArr = (Double[]) parser.stack(-8);
                                        Double res = x*y;
                                        if (!parser.stack(-6).equals(null) && parser.stack(-6).equals("BATTERY")) {
                                            myArr[0]-=res;
                                        } else {
                                            myArr[1]-=res;
                                        }
                                        RESULT = myArr;
                                        System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // consList ::= consList expr KM expr UNITS S 
            { parser.Tree.reduce(6,"consList",0);
              Double[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  
                                        Double[] myArr = (Double[]) parser.stack(-9);
                                        Double res = x*y;
                                        if (!parser.stack(-7).equals(null) && parser.stack(-7).equals("BATTERY")) {
                                            myArr[0]-=res;
                                        } else {
                                            myArr[1]-=res;
                                        }
                                        RESULT = myArr;
                                        System.out.println("battery: " + RESULT[0] + "   fuel: " + RESULT[1]);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
