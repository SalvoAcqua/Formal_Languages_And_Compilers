
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\006\000\002\003\017\000\002\004\005" +
    "\000\002\004\005\000\002\004\002\000\002\005\003\000" +
    "\002\006\006\000\002\006\005\000\002\016\010\000\002" +
    "\016\006\000\002\007\003\000\002\010\005\000\002\010" +
    "\006\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\017\007\000\002\017\005\000\002\013\007\000" +
    "\002\013\011\000\002\015\007\000\002\015\005\000\002" +
    "\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\012\005\ufffa\006\ufffa\007\ufffa\010\ufffa\001" +
    "\002\000\004\002\117\001\002\000\012\005\uffff\006\101" +
    "\007\100\010\077\001\002\000\004\005\007\001\002\000" +
    "\004\021\012\001\002\000\006\005\ufff9\021\074\001\002" +
    "\000\004\005\026\001\002\000\004\013\013\001\002\000" +
    "\004\021\023\001\002\000\006\004\016\011\015\001\002" +
    "\000\004\013\017\001\002\000\006\005\ufff7\021\ufff7\001" +
    "\002\000\004\021\020\001\002\000\004\023\021\001\002" +
    "\000\004\012\022\001\002\000\006\004\ufff6\011\ufff6\001" +
    "\002\000\004\023\024\001\002\000\004\012\025\001\002" +
    "\000\006\004\ufff5\011\ufff5\001\002\000\006\015\033\017" +
    "\031\001\002\000\004\002\000\001\002\000\010\002\ufff1" +
    "\015\ufff1\017\ufff1\001\002\000\004\022\054\001\002\000" +
    "\010\002\ufff0\015\ufff0\017\ufff0\001\002\000\004\021\044" +
    "\001\002\000\006\015\033\017\031\001\002\000\010\002" +
    "\ufff4\015\033\017\031\001\002\000\006\015\033\017\031" +
    "\001\002\000\010\002\ufff3\015\ufff3\017\ufff3\001\002\000" +
    "\006\015\033\017\031\001\002\000\006\015\033\017\031" +
    "\001\002\000\010\002\ufff2\015\ufff2\017\ufff2\001\002\000" +
    "\006\004\050\011\047\001\002\000\004\022\045\001\002" +
    "\000\004\016\046\001\002\000\006\004\uffed\011\uffed\001" +
    "\002\000\004\021\051\001\002\000\010\002\uffef\015\uffef" +
    "\017\uffef\001\002\000\004\022\052\001\002\000\004\016" +
    "\053\001\002\000\006\004\uffee\011\uffee\001\002\000\006" +
    "\014\056\020\055\001\002\000\004\014\uffe8\001\002\000" +
    "\004\021\060\001\002\000\006\004\064\011\063\001\002" +
    "\000\004\021\061\001\002\000\004\023\062\001\002\000" +
    "\006\004\uffe9\011\uffe9\001\002\000\004\021\065\001\002" +
    "\000\010\002\uffec\015\uffec\017\uffec\001\002\000\004\021" +
    "\066\001\002\000\004\023\067\001\002\000\006\004\uffea" +
    "\011\uffea\001\002\000\004\014\071\001\002\000\004\021" +
    "\060\001\002\000\006\004\073\011\063\001\002\000\010" +
    "\002\uffeb\015\uffeb\017\uffeb\001\002\000\004\013\013\001" +
    "\002\000\006\004\076\011\015\001\002\000\006\005\ufff8" +
    "\021\ufff8\001\002\000\004\004\104\001\002\000\004\004" +
    "\103\001\002\000\004\004\102\001\002\000\012\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\001\002\000\012\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\001\002\000\012\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\001\002\000\012\005\ufffe\006\101\007" +
    "\100\010\106\001\002\000\004\004\107\001\002\000\010" +
    "\006\ufffa\007\ufffa\010\ufffa\001\002\000\010\006\101\007" +
    "\100\010\111\001\002\000\004\004\112\001\002\000\010" +
    "\006\ufffa\007\ufffa\010\ufffa\001\002\000\010\006\101\007" +
    "\100\010\114\001\002\000\004\004\115\001\002\000\010" +
    "\005\ufffa\006\ufffa\007\ufffa\001\002\000\010\005\ufffd\006" +
    "\101\007\100\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\010\006\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\026\010\034\011\033\012\027\013\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\042\001\001\000\010\011\037" +
    "\012\027\013\031\001\001\000\010\011\035\012\027\013" +
    "\031\001\001\000\010\011\036\012\027\013\031\001\001" +
    "\000\002\001\001\000\010\011\040\012\027\013\031\001" +
    "\001\000\010\011\041\012\027\013\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\067\001\001\000\004\015\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\115\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Double>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public HashMap<String, HashMap<String, Double>> table;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP locationSec SEP routeSec 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TK12l 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TK12l TK3 S TK12l 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= TK12l TK3 S TK12l TK3 S TK12l TK3 S TK12l TK3 S TK12l 
            { parser.Tree.reduce(13,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TK12l ::= TK12l TK1 S 
            { parser.Tree.reduce(3,"TK12l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK12l",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TK12l ::= TK12l TK2 S 
            { parser.Tree.reduce(3,"TK12l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK12l",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TK12l ::= 
            { parser.Tree.reduce(0,"TK12l",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK12l",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // locationSec ::= dCmdList 
            { parser.Tree.reduce(1,"locationSec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("locationSec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dCmdList ::= dCmdList QSTRING posL S 
            { parser.Tree.reduce(4,"dCmdList",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap y = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.table.put(x,y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dCmdList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dCmdList ::= QSTRING posL S 
            { parser.Tree.reduce(3,"dCmdList",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap y = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.table.put(x,y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dCmdList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // posL ::= posL CM TO QSTRING REAL KM 
            { parser.Tree.reduce(6,"posL",0);
              HashMap RESULT =null;
		int innerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int innerright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap inner = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 inner.put(x,y);
                                                RESULT = inner;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // posL ::= TO QSTRING REAL KM 
            { parser.Tree.reduce(4,"posL",0);
              HashMap RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 HashMap inner = new HashMap<String,Double>();
                                inner.put(x, y);
                                RESULT = inner;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // routeSec ::= cmdList 
            { parser.Tree.reduce(1,"routeSec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeSec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cmdList ::= cmdList cmd cmd 
            { parser.Tree.reduce(3,"cmdList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmdList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cmdList ::= cmd cmd cmd cmd 
            { parser.Tree.reduce(4,"cmdList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmdList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cmd ::= evalCmd 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cmd ::= routeCmd 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // evalCmd ::= ELEVATION placesL S 
            { parser.Tree.reduce(3,"evalCmd",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("ELEVATION " + x[1] + " m"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("evalCmd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // placesL ::= placesL CM QSTRING UINT M 
            { parser.Tree.reduce(5,"placesL",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                            Integer[] myVar = new Integer[2]; 
                                            RESULT = myVar;
                                            RESULT[0] = y;
                                            RESULT[1] = y-x[0]+x[1];
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("placesL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // placesL ::= QSTRING UINT M 
            { parser.Tree.reduce(3,"placesL",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Integer[] myVar = new Integer[2]; 
                        RESULT = myVar;
                        RESULT[0] = x;
                        RESULT[1] = 0; 
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("placesL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // routeCmd ::= ROUTE UINT COL pairsL S 
            { parser.Tree.reduce(5,"routeCmd",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Tot: " + x + " kcal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeCmd",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // routeCmd ::= ROUTE UINT KCAL NT1 COL pairsL S 
            { parser.Tree.reduce(7,"routeCmd",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Tot: " + x + " kcal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("routeCmd",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pairsL ::= pairsL CM QSTRING QSTRING REAL 
            { parser.Tree.reduce(5,"pairsL",0);
              Double RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double w = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double z = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Double res = parser.table.get(y).get(x);
                                                    Double partial_cal = res*z*(Integer)parser.stack(-6);
                                                    System.out.println(y + " " + x + " " + partial_cal + " kcal");
                                                    RESULT = partial_cal + w;
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pairsL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pairsL ::= QSTRING QSTRING REAL 
            { parser.Tree.reduce(3,"pairsL",0);
              Double RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double z = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                    Double res = parser.table.get(y).get(x);
                                    Double partial_cal = res*z*(Integer)parser.stack(-4);
                                    System.out.println(y + " " + x + " " + partial_cal + " kcal");
                                    RESULT = partial_cal;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pairsL",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Integer RESULT =null;
		 RESULT = (Integer)parser.stack(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
