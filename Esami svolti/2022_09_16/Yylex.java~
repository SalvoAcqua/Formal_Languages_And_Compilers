// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: scanner.jflex

/**************************
 Scanner
***************************/

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\2\6\3\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\23"+
    "\3\24\1\25\1\0\1\26\1\0\1\27\21\0\1\30"+
    "\4\0\1\31\3\0\1\32\1\33\1\34\4\0\1\35"+
    "\13\0\1\36\1\0\1\37\12\0\3\40\12\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\3\1\1\4\6\1"+
    "\1\0\1\5\2\0\1\6\1\0\1\7\3\0\1\10"+
    "\6\0\1\11\71\0\1\12\3\0\1\13\5\0\1\14"+
    "\111\0\1\14\40\0\1\13\35\0\1\13\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\41\0\102\0\143\0\204\0\245\0\41"+
    "\0\306\0\347\0\u0108\0\41\0\u0129\0\u014a\0\u016b\0\u018c"+
    "\0\u01ad\0\u01ce\0\143\0\41\0\u01ef\0\u0108\0\306\0\u0210"+
    "\0\41\0\u0231\0\u0252\0\u0273\0\41\0\u0294\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u0318\0\u0339\0\41\0\u035a\0\u037b\0\u039c\0\u03bd"+
    "\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5"+
    "\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd"+
    "\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5"+
    "\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd"+
    "\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5"+
    "\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed"+
    "\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\41\0\u0ab3\0\u0ad4"+
    "\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc"+
    "\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4"+
    "\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb\0\u0dec"+
    "\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4"+
    "\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc"+
    "\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u10e3\0\u1104"+
    "\0\u1125\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c"+
    "\0\u122d\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314"+
    "\0\u1335\0\u1356\0\u1377\0\u1398\0\u13b9\0\u13da\0\u13fb\0\u141c"+
    "\0\u143d\0\u145e\0\u147f\0\u14a0\0\u14c1\0\u14e2\0\u1503\0\u1524"+
    "\0\u1545\0\u147f\0\u1566\0\u1587\0\u15a8\0\u15c9\0\u15ea\0\u160b"+
    "\0\u162c\0\u164d\0\u166e\0\u168f\0\u16b0\0\u16d1\0\u16f2\0\u1713"+
    "\0\u1734\0\u1755\0\u1776\0\u1797\0\u17b8\0\u17d9\0\u17fa\0\u181b"+
    "\0\u183c\0\u185d\0\u187e\0\u189f\0\u18c0\0\u18e1\0\u1902\0\u1923"+
    "\0\u1944\0\u1965\0\u1986\0\u19a7\0\u19c8\0\u19e9\0\u1a0a\0\u1a2b"+
    "\0\u1a4c\0\u1a6d\0\u1a8e\0\u1aaf\0\u1ad0\0\u1af1\0\u1b12\0\u1b33"+
    "\0\u1b54\0\u1b75\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9\0\u1c1a\0\u1c3b"+
    "\0\u1c5c\0\u1c7d\0\u1c9e\0\u1cbf\0\u1ce0\0\u1d01\0\u1d22\0\u1d43"+
    "\0\41\0\u1d64\0\u1d85\0\u1da6\0\u1dc7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\2\1\6\2\2"+
    "\1\7\1\10\1\7\1\11\1\2\1\12\6\13\1\14"+
    "\1\15\1\2\1\16\1\17\1\20\1\21\1\2\1\22"+
    "\2\2\43\0\1\3\36\0\5\23\1\24\33\23\12\0"+
    "\1\25\46\0\6\26\32\0\7\27\30\0\1\27\40\0"+
    "\1\27\1\0\7\26\42\0\1\30\41\0\1\31\45\0"+
    "\1\32\40\0\1\33\40\0\1\34\42\0\1\35\15\0"+
    "\1\36\53\0\1\37\31\0\1\40\60\0\1\41\21\0"+
    "\1\42\17\0\14\36\1\43\24\36\27\0\1\44\30\0"+
    "\1\45\1\46\60\0\1\47\17\0\1\50\21\0\12\36"+
    "\1\51\1\36\1\43\24\36\17\0\1\46\1\52\37\0"+
    "\2\53\60\0\1\54\21\0\1\55\17\0\10\36\1\3"+
    "\3\36\1\43\24\36\11\0\2\56\4\0\1\53\1\57"+
    "\31\0\2\56\4\0\2\60\60\0\1\61\21\0\1\62"+
    "\1\63\36\0\1\64\31\0\2\56\4\0\1\60\1\65"+
    "\31\0\2\56\4\0\2\65\60\0\1\66\16\0\1\67"+
    "\40\0\1\70\41\0\1\71\1\72\31\0\2\56\4\0"+
    "\2\73\60\0\1\74\17\0\1\75\1\76\37\0\1\77"+
    "\40\0\1\72\1\100\37\0\2\101\31\0\2\56\34\0"+
    "\1\102\31\0\1\66\25\0\1\103\32\0\1\104\1\105"+
    "\1\104\37\0\1\104\1\106\1\107\27\0\2\110\4\0"+
    "\1\101\1\111\31\0\2\110\4\0\2\112\60\0\1\113"+
    "\16\0\1\114\40\0\1\115\40\0\1\116\40\0\1\117"+
    "\40\0\1\120\42\0\1\121\31\0\2\110\4\0\1\112"+
    "\1\122\31\0\2\110\4\0\2\122\60\0\1\123\20\0"+
    "\2\124\1\125\35\0\1\126\2\124\1\127\35\0\1\126"+
    "\2\124\1\125\35\0\1\126\1\124\1\130\36\0\1\126"+
    "\1\131\37\0\1\132\1\133\31\0\2\110\4\0\2\134"+
    "\60\0\1\135\17\0\7\136\32\0\1\136\41\0\6\136"+
    "\32\0\2\136\37\0\6\136\33\0\5\136\34\0\1\133"+
    "\1\137\37\0\2\140\31\0\2\110\66\0\1\141\11\0"+
    "\2\142\4\0\1\140\1\143\31\0\2\142\4\0\2\144"+
    "\60\0\1\145\20\0\1\146\31\0\2\142\4\0\1\144"+
    "\1\147\31\0\2\142\4\0\2\147\60\0\1\150\17\0"+
    "\1\151\1\152\31\0\2\142\4\0\2\153\26\0\1\154"+
    "\31\0\1\145\17\0\1\152\1\155\37\0\2\156\31\0"+
    "\2\142\66\0\1\157\11\0\2\160\4\0\1\156\1\161"+
    "\31\0\2\160\4\0\2\162\60\0\1\163\20\0\1\164"+
    "\31\0\2\160\4\0\1\162\1\165\31\0\2\160\4\0"+
    "\2\165\60\0\1\166\17\0\1\167\1\170\31\0\2\160"+
    "\4\0\2\171\60\0\1\172\17\0\1\170\1\173\37\0"+
    "\2\174\31\0\2\160\66\0\1\175\11\0\2\176\4\0"+
    "\1\174\1\177\31\0\2\176\4\0\2\200\60\0\1\201"+
    "\20\0\1\202\31\0\2\176\4\0\1\200\1\203\31\0"+
    "\2\176\4\0\2\203\26\0\1\204\31\0\1\175\17\0"+
    "\1\205\1\206\31\0\2\176\4\0\2\207\60\0\1\210"+
    "\17\0\1\206\1\211\37\0\2\212\31\0\2\176\66\0"+
    "\1\213\11\0\2\214\4\0\1\212\1\215\31\0\2\214"+
    "\4\0\2\216\60\0\1\217\20\0\1\220\31\0\2\214"+
    "\4\0\1\216\1\221\31\0\2\214\4\0\2\221\60\0"+
    "\1\222\17\0\1\223\1\224\31\0\2\214\4\0\2\225"+
    "\60\0\1\226\17\0\1\224\1\227\37\0\2\230\31\0"+
    "\2\214\66\0\1\231\11\0\2\232\4\0\1\230\1\233"+
    "\31\0\2\232\4\0\2\234\26\0\1\235\31\0\1\226"+
    "\20\0\1\236\31\0\2\232\4\0\1\234\1\237\31\0"+
    "\2\232\4\0\2\237\60\0\1\240\17\0\1\241\1\242"+
    "\31\0\2\232\4\0\2\243\60\0\1\244\17\0\1\242"+
    "\1\245\37\0\2\246\31\0\2\232\66\0\1\247\11\0"+
    "\2\250\4\0\1\246\1\251\31\0\2\250\4\0\2\252"+
    "\60\0\1\253\20\0\1\254\31\0\2\250\4\0\1\252"+
    "\1\255\31\0\2\250\4\0\2\255\60\0\1\256\17\0"+
    "\1\257\1\260\31\0\2\250\4\0\2\261\60\0\1\262"+
    "\17\0\1\260\1\263\37\0\2\264\31\0\2\250\37\0"+
    "\2\265\4\0\1\264\1\266\31\0\2\265\4\0\2\267"+
    "\40\0\1\270\31\0\2\265\4\0\1\267\1\271\31\0"+
    "\2\265\4\0\2\271\37\0\1\272\1\273\31\0\2\265"+
    "\4\0\2\274\37\0\1\273\1\275\37\0\2\276\31\0"+
    "\2\265\37\0\2\277\4\0\1\276\1\300\31\0\2\277"+
    "\4\0\2\301\40\0\1\302\31\0\2\277\4\0\1\301"+
    "\1\303\31\0\2\277\4\0\2\303\37\0\1\304\1\305"+
    "\31\0\2\277\4\0\2\306\37\0\1\305\1\307\37\0"+
    "\2\310\31\0\2\277\37\0\2\311\4\0\1\310\1\312"+
    "\31\0\2\311\4\0\2\313\40\0\1\314\31\0\2\311"+
    "\4\0\1\313\1\315\31\0\2\311\4\0\2\315\37\0"+
    "\1\316\1\317\31\0\2\311\4\0\2\320\37\0\1\317"+
    "\1\321\37\0\2\322\31\0\2\311\37\0\2\323\4\0"+
    "\1\322\1\324\31\0\2\323\4\0\2\325\40\0\1\326"+
    "\31\0\2\323\4\0\1\325\1\327\31\0\2\323\4\0"+
    "\2\327\37\0\1\330\1\331\31\0\2\323\4\0\2\332"+
    "\37\0\1\331\1\333\37\0\2\334\31\0\2\323\37\0"+
    "\2\335\4\0\1\334\1\336\31\0\2\335\4\0\2\337"+
    "\40\0\1\340\31\0\2\335\4\0\1\337\1\341\31\0"+
    "\2\335\4\0\2\341\37\0\1\342\1\343\31\0\2\335"+
    "\4\0\2\344\37\0\1\343\1\345\37\0\2\346\31\0"+
    "\2\335\37\0\2\347\4\0\1\346\1\350\31\0\2\347"+
    "\4\0\2\351\40\0\1\352\31\0\2\347\4\0\1\351"+
    "\1\353\31\0\2\347\4\0\2\353\37\0\1\354\1\355"+
    "\31\0\2\347\4\0\2\356\37\0\1\355\1\357\37\0"+
    "\2\360\31\0\2\347\37\0\2\361\4\0\1\360\1\362"+
    "\31\0\2\361\4\0\2\363\31\0\2\361\4\0\1\363"+
    "\1\364\31\0\2\361\4\0\2\364\31\0\2\361\4\0"+
    "\2\365\31\0\2\361\26\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7656];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\3\1\1\11\6\1\1\0"+
    "\1\11\2\0\1\1\1\0\1\11\3\0\1\11\6\0"+
    "\1\11\71\0\1\11\3\0\1\1\5\0\1\1\111\0"+
    "\1\1\40\0\1\1\35\0\1\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner Error: " + yytext());
            }
          // fall through
          case 13: break;
          case 2:
            { ;
            }
          // fall through
          case 14: break;
          case 3:
            { return sym(sym.CM);
            }
          // fall through
          case 15: break;
          case 4:
            { return sym(sym.S);
            }
          // fall through
          case 16: break;
          case 5:
            { return sym(sym.QSTRING, new String(yytext()));
            }
          // fall through
          case 17: break;
          case 6:
            { return sym(sym.REAL, new Double(yytext()));
            }
          // fall through
          case 18: break;
          case 7:
            { return sym(sym.TO);
            }
          // fall through
          case 19: break;
          case 8:
            { return sym(sym.KM);
            }
          // fall through
          case 20: break;
          case 9:
            { return sym(sym.SEP);
            }
          // fall through
          case 21: break;
          case 10:
            { return sym(sym.TK3);
            }
          // fall through
          case 22: break;
          case 11:
            { return sym(sym.TK1);
            }
          // fall through
          case 23: break;
          case 12:
            { return sym(sym.TK2);
            }
          // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
