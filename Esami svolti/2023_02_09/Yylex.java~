// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: scanner.jflex

/**************************
 Scanner
***************************/

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\3\0"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\1\0\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\4\22\1\23\1\0\1\24\5\0\6\25\32\0\6\25"+
    "\36\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\5\1\1\3\11\0\1\4\125\0"+
    "\1\5\14\0\1\5\16\0\1\5\31\0\1\5\7\0"+
    "\1\5\23\0\1\6\2\0\1\5\7\0\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\26\0\54\0\102\0\130\0\156\0\204"+
    "\0\232\0\26\0\260\0\306\0\334\0\362\0\u0108\0\u011e"+
    "\0\u0134\0\u014a\0\u0160\0\260\0\u0176\0\u018c\0\u01a2\0\u01b8"+
    "\0\u01ce\0\u01e4\0\u01fa\0\u0210\0\u0226\0\u023c\0\u0252\0\u0268"+
    "\0\u027e\0\u0294\0\u02aa\0\u02c0\0\u02d6\0\u02ec\0\u0302\0\u0318"+
    "\0\u032e\0\u0344\0\u035a\0\u0370\0\u0386\0\u039c\0\u03b2\0\u03c8"+
    "\0\u03de\0\u03f4\0\u040a\0\u0420\0\u0436\0\u044c\0\u0462\0\u0478"+
    "\0\u048e\0\u04a4\0\u04ba\0\u04d0\0\u04e6\0\u04fc\0\u0512\0\u0528"+
    "\0\u053e\0\u0554\0\u056a\0\u0580\0\u0596\0\u05ac\0\u05c2\0\u05d8"+
    "\0\u05ee\0\u0604\0\u061a\0\u0630\0\u0646\0\u065c\0\u0672\0\u0688"+
    "\0\u069e\0\u06b4\0\u06ca\0\u06e0\0\u06f6\0\u070c\0\u0722\0\u0738"+
    "\0\u074e\0\u0764\0\u077a\0\u0790\0\u07a6\0\u07bc\0\u07d2\0\u07e8"+
    "\0\u07fe\0\u0814\0\u082a\0\u0840\0\u0856\0\u086c\0\u0882\0\u0898"+
    "\0\u08ae\0\u08c4\0\u08da\0\u08f0\0\u0906\0\u091c\0\u0932\0\u0948"+
    "\0\u095e\0\u0974\0\u098a\0\u09a0\0\u09b6\0\u09cc\0\u09e2\0\u09f8"+
    "\0\u0a0e\0\u0a24\0\u0a3a\0\u0a50\0\u0a66\0\u0a7c\0\u0a92\0\u0aa8"+
    "\0\u0abe\0\u0ad4\0\u0aea\0\u0b00\0\u0b16\0\u0b2c\0\u0b42\0\u0b58"+
    "\0\u0b6e\0\u0b84\0\u0b9a\0\u0bb0\0\u0bc6\0\u0bdc\0\u0bf2\0\u0c08"+
    "\0\u0c1e\0\u0c34\0\u0c4a\0\u0c60\0\u0c76\0\u0c8c\0\u0ca2\0\u0cb8"+
    "\0\u0cce\0\u0ce4\0\u0cfa\0\u0d10\0\u0d26\0\u0d3c\0\u0d52\0\u0d68"+
    "\0\u0d7e\0\u0d94\0\u0daa\0\u0dc0\0\u0dd6\0\u0dec\0\u0e02\0\u0e18"+
    "\0\u0e2e\0\u0e44\0\u0e5a\0\u0e70\0\u0e86\0\u0e9c\0\u0eb2\0\u0ec8"+
    "\0\u0ede\0\u0ef4\0\u0f0a\0\u0f20\0\u0f36\0\u0f4c\0\u0f62\0\u0f78"+
    "\0\u0f8e\0\u0fa4\0\u0fba\0\u0fd0\0\u0fe6\0\u0ffc\0\26\0\u1012"+
    "\0\u1028\0\u103e\0\u1054\0\u106a\0\u1080\0\u1096\0\u1096\0\26";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\5\2\1\11\4\2\1\12\1\2\30\0\1\3"+
    "\30\0\1\13\26\0\1\14\2\0\1\14\25\0\1\15"+
    "\22\0\1\14\34\0\1\16\15\0\1\17\26\0\1\20"+
    "\2\0\1\21\27\0\1\22\31\0\1\23\13\0\1\24"+
    "\26\0\1\25\2\0\1\25\22\0\1\25\17\0\13\22"+
    "\1\26\12\22\17\0\1\27\1\30\13\0\1\31\2\0"+
    "\1\32\14\0\11\22\1\33\1\22\1\26\12\22\14\0"+
    "\1\34\25\0\1\35\17\0\1\36\2\0\1\36\22\0"+
    "\1\36\17\0\10\22\1\3\2\22\1\26\12\22\16\0"+
    "\1\37\24\0\1\40\16\0\1\41\2\0\1\42\32\0"+
    "\1\43\1\44\24\0\1\45\1\46\1\47\13\0\1\50"+
    "\2\0\1\50\22\0\1\50\33\0\1\51\25\0\1\52"+
    "\25\0\1\53\25\0\1\54\25\0\1\55\17\0\1\56"+
    "\2\0\1\57\32\0\1\60\1\61\1\62\22\0\1\63"+
    "\1\64\1\61\1\65\22\0\1\63\2\61\1\65\22\0"+
    "\1\63\1\66\1\67\23\0\1\63\2\61\1\62\13\0"+
    "\1\70\2\0\1\70\22\0\1\70\41\0\2\71\17\0"+
    "\7\71\17\0\1\71\26\0\6\71\17\0\3\71\1\0"+
    "\3\71\17\0\2\71\24\0\4\71\1\0\2\71\17\0"+
    "\4\71\1\0\1\71\11\0\1\72\2\0\1\73\21\0"+
    "\2\74\25\0\1\75\2\0\1\75\22\0\1\75\36\0"+
    "\1\76\14\0\1\77\2\0\1\100\4\0\6\101\1\0"+
    "\1\101\15\0\1\102\16\0\1\103\2\0\1\103\22\0"+
    "\1\103\34\0\7\104\1\0\1\104\17\0\1\105\14\0"+
    "\1\106\2\0\1\107\4\0\6\101\1\0\1\101\12\0"+
    "\1\110\2\0\7\111\1\0\1\111\17\0\1\112\1\113"+
    "\13\0\1\114\2\0\1\114\22\0\1\114\35\0\6\115"+
    "\1\0\1\115\12\0\1\110\2\0\7\116\1\0\1\116"+
    "\14\0\1\117\25\0\1\120\17\0\1\121\2\0\1\122"+
    "\4\0\6\101\1\0\1\101\15\0\7\123\1\0\1\123"+
    "\15\0\7\124\1\0\1\124\16\0\1\125\24\0\1\126"+
    "\16\0\1\127\2\0\1\127\22\0\1\127\31\0\1\130"+
    "\2\0\7\131\1\0\1\131\15\0\7\132\1\0\1\132"+
    "\16\0\1\133\1\134\24\0\1\135\1\136\1\137\13\0"+
    "\1\140\2\0\1\141\4\0\6\101\1\0\1\101\16\0"+
    "\6\142\1\0\1\142\12\0\1\130\2\0\7\143\1\0"+
    "\1\143\12\0\1\110\27\0\1\144\25\0\1\145\25\0"+
    "\1\146\25\0\1\147\25\0\1\150\17\0\1\151\2\0"+
    "\1\151\22\0\1\151\34\0\7\152\1\0\1\152\15\0"+
    "\7\153\1\0\1\153\16\0\1\154\1\155\1\156\22\0"+
    "\1\157\1\160\1\155\1\161\22\0\1\157\2\155\1\161"+
    "\22\0\1\157\1\162\1\163\23\0\1\157\2\155\1\156"+
    "\13\0\1\164\2\0\1\165\4\0\6\101\1\0\1\101"+
    "\12\0\1\166\2\0\7\167\1\0\1\167\15\0\7\170"+
    "\1\0\1\170\22\0\2\171\17\0\7\171\17\0\1\171"+
    "\26\0\6\171\17\0\3\171\1\0\3\171\17\0\2\171"+
    "\24\0\4\171\1\0\2\171\17\0\4\171\1\0\1\171"+
    "\11\0\1\172\2\0\1\172\22\0\1\172\35\0\6\173"+
    "\1\0\1\173\12\0\1\166\2\0\7\174\1\0\1\174"+
    "\12\0\1\130\20\0\2\175\25\0\1\176\2\0\1\177"+
    "\4\0\6\101\1\0\1\101\15\0\7\200\1\0\1\200"+
    "\15\0\7\201\1\0\1\201\17\0\1\202\14\0\1\203"+
    "\2\0\1\203\22\0\1\203\31\0\1\204\2\0\7\205"+
    "\1\0\1\205\15\0\7\206\1\0\1\206\15\0\1\207"+
    "\16\0\1\210\2\0\1\211\4\0\6\101\1\0\1\101"+
    "\16\0\6\212\1\0\1\212\12\0\1\204\2\0\7\213"+
    "\1\0\1\213\12\0\1\166\32\0\1\214\14\0\1\215"+
    "\2\0\1\215\22\0\1\215\34\0\7\216\1\0\1\216"+
    "\15\0\7\217\1\0\1\217\17\0\1\220\1\221\13\0"+
    "\1\222\2\0\1\223\4\0\6\101\1\0\1\101\12\0"+
    "\1\224\2\0\7\225\1\0\1\225\15\0\7\226\1\0"+
    "\1\226\14\0\1\227\25\0\1\230\17\0\1\231\2\0"+
    "\1\231\22\0\1\231\35\0\6\232\1\0\1\232\12\0"+
    "\1\224\2\0\7\233\1\0\1\233\12\0\1\204\31\0"+
    "\1\234\24\0\1\235\16\0\1\236\2\0\1\237\4\0"+
    "\6\101\1\0\1\101\15\0\7\240\1\0\1\240\15\0"+
    "\7\241\1\0\1\241\16\0\1\242\1\243\24\0\1\244"+
    "\1\245\1\246\13\0\1\247\2\0\1\247\22\0\1\247"+
    "\34\0\7\250\1\0\1\250\15\0\7\251\1\0\1\251"+
    "\14\0\1\252\25\0\1\253\25\0\1\254\25\0\1\255"+
    "\25\0\1\256\17\0\1\257\2\0\1\260\4\0\6\101"+
    "\1\0\1\101\15\0\7\261\1\0\1\261\12\0\1\224"+
    "\31\0\1\262\1\263\1\264\22\0\1\265\1\266\1\263"+
    "\1\267\22\0\1\265\2\263\1\267\22\0\1\265\1\270"+
    "\1\271\23\0\1\265\2\263\1\264\13\0\1\272\2\0"+
    "\1\272\22\0\1\272\34\0\7\273\1\0\1\273\22\0"+
    "\2\274\17\0\7\274\17\0\1\274\26\0\6\274\17\0"+
    "\3\274\1\0\3\274\17\0\2\274\24\0\4\274\1\0"+
    "\2\274\17\0\4\274\1\0\1\274\11\0\1\275\2\0"+
    "\1\276\4\0\6\101\1\0\1\101\15\0\7\277\1\0"+
    "\1\277\13\0\1\300\20\0\1\301\2\0\1\301\22\0"+
    "\1\301\35\0\1\302\25\0\6\101\1\0\1\101\15\0"+
    "\1\303\1\304\24\0\1\304\1\305\24\0\2\306\24\0"+
    "\1\306\1\307\24\0\2\310\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4268];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\11\0\1\1\125\0\1\1"+
    "\14\0\1\1\16\0\1\1\31\0\1\1\7\0\1\1"+
    "\23\0\1\1\2\0\1\11\7\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner Error: " + yytext());
            }
          // fall through
          case 7: break;
          case 2:
            { ;
            }
          // fall through
          case 8: break;
          case 3:
            { return sym(sym.S);
            }
          // fall through
          case 9: break;
          case 4:
            { return sym(sym.SEP);
            }
          // fall through
          case 10: break;
          case 5:
            { return sym(sym.TK1);
            }
          // fall through
          case 11: break;
          case 6:
            { return sym(sym.TK2);
            }
          // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
