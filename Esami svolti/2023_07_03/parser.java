
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\007\000\002\003" +
    "\011\000\002\003\011\000\002\004\005\000\002\004\002" +
    "\000\002\005\003\000\002\006\005\000\002\006\004\000" +
    "\002\007\007\000\002\015\006\000\002\015\004\000\002" +
    "\010\003\000\002\011\010\000\002\011\002\000\002\012" +
    "\006\000\002\012\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\004\000\002\014\005\000\002\014\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\005\ufffc\006\ufffc\007\ufffc\001\002\000" +
    "\010\005\067\006\066\007\065\001\002\000\004\002\064" +
    "\001\002\000\004\004\007\001\002\000\004\011\012\001" +
    "\002\000\006\004\ufffb\011\012\001\002\000\004\004\026" +
    "\001\002\000\004\030\015\001\002\000\004\011\012\001" +
    "\002\000\006\004\ufff9\011\ufff9\001\002\000\004\012\016" +
    "\001\002\000\004\030\020\001\002\000\006\013\023\014" +
    "\022\001\002\000\004\031\021\001\002\000\006\013\ufff6" +
    "\014\ufff6\001\002\000\004\030\024\001\002\000\006\004" +
    "\ufff8\011\ufff8\001\002\000\004\031\025\001\002\000\006" +
    "\013\ufff7\014\ufff7\001\002\000\006\002\ufff3\015\ufff3\001" +
    "\002\000\006\002\ufff5\015\031\001\002\000\004\002\000" +
    "\001\002\000\010\022\032\023\034\030\035\001\002\000" +
    "\010\022\032\023\034\030\035\001\002\000\010\016\050" +
    "\020\043\021\045\001\002\000\010\022\032\023\034\030" +
    "\035\001\002\000\004\026\036\001\002\000\004\030\037" +
    "\001\002\000\004\025\040\001\002\000\004\031\041\001" +
    "\002\000\012\016\uffec\020\uffec\021\uffec\024\uffec\001\002" +
    "\000\010\020\043\021\045\024\044\001\002\000\010\022" +
    "\032\023\034\030\035\001\002\000\012\016\uffed\020\uffed" +
    "\021\uffed\024\uffed\001\002\000\010\022\032\023\034\030" +
    "\035\001\002\000\012\016\uffef\020\043\021\uffef\024\uffef" +
    "\001\002\000\012\016\ufff0\020\ufff0\021\ufff0\024\ufff0\001" +
    "\002\000\004\027\052\001\002\000\006\017\055\027\056" +
    "\001\002\000\004\030\053\001\002\000\004\010\054\001" +
    "\002\000\006\017\ufff1\027\ufff1\001\002\000\006\002\ufff4" +
    "\015\ufff4\001\002\000\004\030\057\001\002\000\004\010" +
    "\060\001\002\000\006\017\ufff2\027\ufff2\001\002\000\012" +
    "\016\uffee\020\uffee\021\uffee\024\uffee\001\002\000\004\011" +
    "\012\001\002\000\006\004\ufffa\011\ufffa\001\002\000\004" +
    "\002\001\001\002\000\004\010\102\001\002\000\004\010" +
    "\075\001\002\000\004\010\070\001\002\000\006\006\ufffc" +
    "\007\ufffc\001\002\000\006\006\072\007\065\001\002\000" +
    "\004\010\073\001\002\000\006\004\ufffc\007\ufffc\001\002" +
    "\000\006\004\uffff\007\065\001\002\000\006\005\ufffc\007" +
    "\ufffc\001\002\000\006\005\077\007\065\001\002\000\004" +
    "\010\100\001\002\000\006\004\ufffc\007\ufffc\001\002\000" +
    "\006\004\ufffe\007\065\001\002\000\012\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\002\004\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\010\006\007\007\012\001\001\000\004\007\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\027\011\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\032\001" +
    "\001\000\004\014\060\001\001\000\002\001\001\000\004" +
    "\014\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\046\001\001\000\002\001\001\000" +
    "\004\014\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\073\001\001\000\002\001" +
    "\001\000\004\004\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\100\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Integer>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public HashMap<String, HashMap<String, Integer>> table;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP housesSec SEP preferenceSec 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TK3list TK1 S TK3list TK2 S TK3list 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TK3list TK2 S TK3list TK1 S TK3list 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TK3list ::= TK3list TK3 S 
            { parser.Tree.reduce(3,"TK3list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK3list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TK3list ::= 
            { parser.Tree.reduce(0,"TK3list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TK3list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // housesSec ::= lhouses 
            { parser.Tree.reduce(1,"housesSec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("housesSec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lhouses ::= lhouses house house 
            { parser.Tree.reduce(3,"lhouses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lhouses",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lhouses ::= house house 
            { parser.Tree.reduce(2,"lhouses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lhouses",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // house ::= HOUSE QSTRING START lroom END 
            { parser.Tree.reduce(5,"house",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap y = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.table.put(x,y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("house",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lroom ::= lroom CM QSTRING UINT 
            { parser.Tree.reduce(4,"lroom",0);
              HashMap RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap x = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 x.put(y,z);
                                         RESULT = x;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lroom",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lroom ::= QSTRING UINT 
            { parser.Tree.reduce(2,"lroom",0);
              HashMap RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                       HashMap inner = new HashMap<String,Integer>();
                       inner.put(x, y);
                       RESULT = inner;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lroom",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // preferenceSec ::= ifList 
            { parser.Tree.reduce(1,"preferenceSec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preferenceSec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ifList ::= ifList IF boolExpr THEN lPrint FI 
            { parser.Tree.reduce(6,"ifList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ifList ::= 
            { parser.Tree.reduce(0,"ifList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lPrint ::= lPrint PRINT QSTRING S 
            { parser.Tree.reduce(4,"lPrint",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                      if ((Boolean)parser.stack(-5).equals(true))
                                           System.out.println(x); 
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lPrint",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lPrint ::= PRINT QSTRING S 
            { parser.Tree.reduce(3,"lPrint",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                            if ((Boolean)parser.stack(-4).equals(true))
                              System.out.println(x); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lPrint",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolExpr ::= boolExpr AND boolExpr 
            { parser.Tree.reduce(3,"boolExpr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x&&y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolExpr ::= boolExpr OR boolExpr 
            { parser.Tree.reduce(3,"boolExpr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x||y; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolExpr ::= NOT boolExpr 
            { parser.Tree.reduce(2,"boolExpr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolExpr ::= RO boolExpr RC 
            { parser.Tree.reduce(3,"boolExpr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolExpr ::= QSTRING DOT QSTRING EQEQ UINT 
            { parser.Tree.reduce(5,"boolExpr",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                            Integer exp = new Integer(parser.table.get(x).get(y));
                                            if ( exp.equals(z)) {
                                                  RESULT = true;
                                            }
                                            else
                                                  RESULT = false;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolExpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
