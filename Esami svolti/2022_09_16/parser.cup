/*************************
 Parser
**************************/

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
    table = new HashMap<String, HashMap<String, Double>>();
:};

parser code 	{:

    public HashMap<String, HashMap<String, Double>> table;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};

/*action code {:
    class MyObj {
        public String minMaterial;
        public String maxMaterial;
        public Double minValue;
        public Double maxValue;
        public HashMap tab;

        MyObj(String minMaterial, String maxMaterial, Double minValue, Double maxValue, HashMap tab){
            this.minMaterial = minMaterial;
            this.maxMaterial = maxMaterial;
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.tab = tab;
        }
    };
:};*/



//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////

terminal S, SEP, TK1, TK2, TK3, CM, KM, TO, COL, ELEVATION, M, ROUTE, KCAL;
terminal String QSTRING;
terminal Integer UINT;
//terminal Float ;
terminal Double REAL;

non terminal prog, header, TK12l, locationSec, dCmdList, routeSec, cmdList, cmd, evalCmd, routeCmd;
//non terminal String ;
non terminal Integer NT1;
//non terminal Float ;
non terminal Double pairsL;
non terminal HashMap posL;
//non terminal Object[] ;
non terminal Integer[] placesL ;

//precedence left OR;
//precedence left AND;
//precedence left NOT;
//precedence left MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
//precedence left PLUS, MINUS;
//precedence left STAR, DIV;
//precedence left uminus;               //Ã¨ un terminal

//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog ::= header SEP locationSec SEP routeSec;

header ::= TK12l | TK12l TK3 S TK12l |  TK12l TK3 S TK12l TK3 S TK12l TK3 S TK12l TK3 S TK12l;

TK12l ::= TK12l TK1 S | TK12l TK2 S | ;



locationSec ::= dCmdList;

dCmdList ::= dCmdList QSTRING:x posL:y S {:parser.table.put(x,y); :}
    | QSTRING:x posL:y S {: parser.table.put(x,y); :};

posL ::= posL:inner CM TO QSTRING:x REAL:y KM {: inner.put(x,y);
                                                RESULT = inner;
                                                :}
    | TO QSTRING:x REAL:y KM {: HashMap inner = new HashMap<String,Double>();
                                inner.put(x, y);
                                RESULT = inner;
                            :};



routeSec ::= cmdList;

cmdList ::= cmdList cmd cmd | cmd cmd cmd cmd;

cmd ::= evalCmd | routeCmd ;


evalCmd ::= ELEVATION placesL:x S {: System.out.println("ELEVATION " + x[1] + " m"); :};

placesL ::= placesL:x CM QSTRING UINT:y M {: 
                                            Integer[] myVar = new Integer[2]; 
                                            RESULT = myVar;
                                            RESULT[0] = y;
                                            RESULT[1] = y-x[0]+x[1];
                                        :}
    | QSTRING UINT:x M {: Integer[] myVar = new Integer[2]; 
                        RESULT = myVar;
                        RESULT[0] = x;
                        RESULT[1] = 0; 
                         :};


routeCmd ::= ROUTE UINT COL pairsL:x S {: System.out.println("Tot: " + x + " kcal"); :}
    | ROUTE UINT KCAL NT1 COL pairsL:x S {: System.out.println("Tot: " + x + " kcal"); :};

pairsL ::= pairsL:w CM QSTRING:y QSTRING:x REAL:z {: Double res = parser.table.get(y).get(x);
                                                    Double partial_cal = res*z*(Integer)parser.stack(-6);
                                                    System.out.println(y + " " + x + " " + partial_cal + " kcal");
                                                    RESULT = partial_cal + w;
                                             :}
    | QSTRING:y QSTRING:x REAL:z {: 
                                    Double res = parser.table.get(y).get(x);
                                    Double partial_cal = res*z*(Integer)parser.stack(-4);
                                    System.out.println(y + " " + x + " " + partial_cal + " kcal");
                                    RESULT = partial_cal;
                                :};

NT1 ::= {: RESULT = (Integer)parser.stack(-1); :};


/*
expr ::= expr:e1 PLUS expr:e2 {: RESULT = e1+e2;  :}
    | expr:e1 MINUS expr:e2 {: RESULT = e1-e2;  :}
    | expr:e1 STAR expr:e2 {: RESULT = e1*e2;  :}
    | expr:e1 DIV expr:e2 {: RESULT = e1/e2;  :}
    | MINUS expr:x {: RESULT = - x; :} %prec uminus
    | RO expr:x RC {: RESULT = x; :}
    | ID:x {: RESULT = parser.table.get(x); :}
    | UINT:x {: RESULT = x; :}

    |expr AND expr
    |expr OR expr
    |NOT expr

    |expr EQEQ expr
    |expr MIN expr
    |expr MAJ expr
    |expr MIN_EQ expr
    |expr MAJ_EQ expr;
*/




/* System.out.println(parser.stack(-5)); */
/* if (!parser.stack(-5).equals(null) && parser.stack(-5).equals("with")); */
/* HashMap table = new HashMap<String,Integer>(); */
/* Integer.MAX_VALUE */
/* Double.MAX_VALUE */
